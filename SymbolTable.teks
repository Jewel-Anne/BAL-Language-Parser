//OutputStatement	Comment
int	Integer_dt
a	Identifier
=	Assign_Operator
0	integerLiteral
;	Terminator
go	Print_Key
(	Delimiter_OpenParen
"	Delimiter_Quote
hello	StringLiteral
"	Delimiter_Quote
+	add_Operator
a	Identifier
)	Delimiter_CloseParen
;	Terminator
go	Print_Key
(	Delimiter_OpenParen
"	Delimiter_Quote
hello	StringLiteral
"	Delimiter_Quote
+	add_Operator
z	Identifier
)	Delimiter_CloseParen
;	Terminator
//inputStatement	Comment
int	Integer_dt
b	Identifier
=	Assign_Operator
0	integerLiteral
;	Terminator
catch	Scan_Key
(	Delimiter_OpenParen
b	Identifier
)	Delimiter_CloseParen
;	Terminator
catch	Scan_Key
(	Delimiter_OpenParen
x	Identifier
)	Delimiter_CloseParen
;	Terminator
//assignmentstatement	Comment
a	Identifier
=	Assign_Operator
10	integerLiteral
;	Terminator
a	Identifier
=	Assign_Operator
1.1	floatLiteral
;	Terminator
q	Identifier
=	Assign_Operator
0	integerLiteral
;	Terminator
//ConditionStatement	Comment
if	ifKey
(	Delimiter_OpenParen
a	Identifier
==	Relational_Operator
1	integerLiteral
)	Delimiter_CloseParen
{	Delimiter_OpenBrack
}	Delimiter_CloseBrack
if	ifKey
(	Delimiter_OpenParen
y	Identifier
==	Relational_Operator
16	integerLiteral
)	Delimiter_CloseParen
{	Delimiter_OpenBrack
}	Delimiter_CloseBrack
if	ifKey
(	Delimiter_OpenParen
a	Identifier
==	Relational_Operator
10.1	floatLiteral
)	Delimiter_CloseParen
{	Delimiter_OpenBrack
}	Delimiter_CloseBrack
//IterativeStatement	Comment
do	SLoop_Key
{	Delimiter_OpenBrack
}	Delimiter_CloseBrack
while	ELoop_Key
(	Delimiter_OpenParen
a	Identifier
!=	Relational_Operator
3	integerLiteral
)	Delimiter_CloseParen
;	Terminator
do	SLoop_Key
{	Delimiter_OpenBrack
}	Delimiter_CloseBrack
while	ELoop_Key
(	Delimiter_OpenParen
z	Identifier
!=	Relational_Operator
3	integerLiteral
)	Delimiter_CloseParen
;	Terminator
do	SLoop_Key
{	Delimiter_OpenBrack
}	Delimiter_CloseBrack
while	ELoop_Key
(	Delimiter_OpenParen
a	Identifier
!=	Relational_Operator
25.1	floatLiteral
)	Delimiter_CloseParen
;	Terminator
//DeclarationStatement	Comment
float	Float_dt
c	Identifier
=	Assign_Operator
10.0	floatLiteral
;	Terminator
String	String_dt
d	Identifier
=	Assign_Operator
27	integerLiteral
;	Terminator
int	Integer_dt
e	Identifier
=	Assign_Operator
20	integerLiteral
;	Terminator
int	Integer_dt
e	Identifier
=	Assign_Operator
10	integerLiteral
;	Terminator
//AdditionalSemanticError	Comment
int	Integer_dt
f	Identifier
;	Terminator
int	Integer_dt
g	Identifier
;	Terminator
g	Identifier
=	Assign_Operator
f	Identifier
;	Terminator
if	ifKey
(	Delimiter_OpenParen
a	Identifier
=	Assign_Operator
34	integerLiteral
)	Delimiter_CloseParen
{	Delimiter_OpenBrack
}	Delimiter_CloseBrack
do	SLoop_Key
{	Delimiter_OpenBrack
}	Delimiter_CloseBrack
while	ELoop_Key
(	Delimiter_OpenParen
a	Identifier
=	Assign_Operator
2	integerLiteral
)	Delimiter_CloseParen
;	Terminator
int	Integer_dt
@aa	Wrong_Input
=	Assign_Operator
10	integerLiteral
;	Terminator
